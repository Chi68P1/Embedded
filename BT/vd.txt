#include <wiringPiSPI.h>
#include <wiringPi.h>
#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include <wiringPiI2C.h>

#define Sample_rate         25
#define Config              26
#define Gygro_config        27
#define Acc_config          28
#define Interrupt           56
#define PWR_Managment       107
#define Acc_X               59
#define Acc_Y               61
#define Acc_Z               63
#define TemptHigh           65
#define Gygro_X             67
#define Gygro_Y             69
#define Gygro_Z             71  
#define spi0   0

uint8_t buf[2];
int mpu;
int delta_t;
float temp;
float rate_Roll, rate_Pitch, rate_Yaw;
float Ax, Ay, Az;
float angle_Pitch, angle_Roll;
float AccXInertial, AccYInertial, AccZInertial;
float Vx, Vy, Vz;


int Read_sesor(unsigned char Tempt_register){
    int16_t MSB, LSB, data;
    MSB = wiringPiI2CReadReg8(mpu, Tempt_register);
    LSB = wiringPiI2CReadReg8(mpu, Tempt_register + 1 );
    data = (MSB<<8) | LSB;
    return data;
}

void sendData(uint8_t address, uint8_t data){
    buf[0] = address;
    buf[1] = data;
    wiringPiSPIDataRW(spi0, buf, 2);
}

void Init(void){
    // set decode mode: 0x09
    sendData(0x09,0xEE);
    // set intensity: 0x0A09
    sendData(0x0A, 9);
    // scan limit: 0x0B07
    sendData(0x0B, 7);
    // no shutdown, turn off display test
    sendData(0x0C, 1);
    sendData(0x0F, 0);
}

void Init_MPU6050(void){
    //resigter 25 -> 28 , 55, 56 ,107
    //sample rate 100hz
    wiringPiI2CWriteReg8(mpu, Sample_rate, 0x09);
    // no ext clock, DLFP 94hz
    wiringPiI2CWriteReg8(mpu, Acc_config, 0x02);
    // gyro FS: +- 500 o/s
    wiringPiI2CWriteReg8(mpu, Gygro_config, 0x08);
    // acc FS: +-8g
    wiringPiI2CWriteReg8(mpu, Acc_config, 0x10);
    // ennable interrupt Data ready
    wiringPiI2CWriteReg8(mpu, Interrupt, 0x01);
    // chọn nguồn xung Gyro X
    wiringPiI2CWriteReg8(mpu, PWR_Managment,0x01);
}

float Read_MPU6050(){
    delta_t = 1;
    // nhiệt độ cảm biến
    temp = (float)Read_sesor(TemptHigh)/340.0 + 36.53;

    // gia tốc theo trục
    Ax = (float)Read_sesor(Acc_X) / 4096.0; 
    Ay = (float)Read_sesor(Acc_Y) / 4096.0;
    Az = (float)Read_sesor(Acc_Z) / 4096.0;

    // góc nghiêng khi cảm biên không chuyển dộng
    angle_Pitch = fabs(-atan2(Ax, sqrt(pow(Ay, 2)+pow(Az, 2)))*180/M_PI);
    angle_Poll = fabs(atan2(Ay, sqrt(pow(Ax, 2)+pow(Az, 2)))*180/M_PI);

    // góc quay
    rate_Roll = Read_sesor(Gygro_X)/65.5;
    rate_Pitch = Read_sesor(Gygro_X)/65.5;
    rate_Yaw = Read_sesor(Gygro_X)/65.5;

    // gia tốc quán tính theo trục 
    AccXInertial = Acc_X + sin(angle_Roll*(M_PI/180)) * cos(angle_Pitch*(M_PI/180)) * Acc_Y - cos(angle_Roll*(M_PI/180)) * cos(angle_Pitch*(M_PI/180)) * Acc_Z;
    AccYInertial = cos(angle_Roll*(M_PI/180)) * Acc_Y - sin(angle_Roll*(M_PI/180)) * Acc_Z;
    AccZInertial = -sin(angle_Pitch*(M_PI/180))*Acc_X+cos(angle_Pitch*(M_PI/180))*sin(angle_Roll*(M_PI/180))*Acc_Y+cos(angle_Pitch*(M_PI/180))*cos(angle_Roll*(M_PI/180))*Acc_Z;
    

    // chuyển sang cm/s2
    AccXInertial = (AccXInertial-1)*9.81*100;
    AccYInertial = (AccYInertial-1)*9.81*100;
    AccZInertial = (AccZInertial-1)*9.81*100;
    
    // vận tốc theo trục
    Vx = Vx + AccXInertial*delta_t;
    Vy = Vy + AccYInertial*delta_t;
    Vz = Vz + AccYInertial*delta_t;

    delay(delta_t); // thời gian lấy mẫu

return Ax,Ay,Az,angle_Pitch,angle_Roll,rate_Pitch,rate_Roll,rate_Yaw,AccXInertial,AccYInertial,AccZInertial,Vx,Vy,Vz;
}

int main(void){
    // setup SPI interface
    wiringPiSPISetup(spi0,10000000);
    // setup I2C peripheral
    mpu = wiringPiI2CSetup(0x68);
    //check I2C connenction
    if(wiringPiI2CReadReg8(mpu, 0x85) != 0x68){
        printf("connect fail!");
    }
    // MPU6050 configuration
    Init_MPU6050();
     // set operational mode for max7219
    Init_MAX7219();

    while (1){
        Read_MPU6050();
        printf();
}
}